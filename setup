#!/bin/bash
# shellcheck disable=SC2016
set -e -o pipefail

(( BASH_VERSINFO[0] < 4 )) && echo "Bash 4+ required." && exit 1

: "${PAGER:=more}"

if command -v nvim >/dev/null 2>&1; then
	: "${EDITOR:=nvim}"
else
	: "${EDITOR:=vim}"
fi

: "${HELP_BROWSER:=}"
: "${EXE:="${0##*/}"}"

export NEEDRESTART_SUSPEND=yes
export HOMEBIN="$HOME/.local/bin"

mkdir -p "$HOMEBIN"

mkdir -p "$HOME/temp"
mkdir -p "$HOME/Repos/github.com/$(whoami)"
mkdir -p "$HOME/temp"

declare -A HELP
declare -A CONF

echo "Use *help* if you're stuck"

HELP[update]='runs apt-get update and upgrade'
x.update () {
	set -x
	sudo apt-get -y update
	sudo apt-get -y upgrade
	set +x
}

HELP[go]='runs apt-get -y install golang gopls'
x.go () {
	sudo apt-get -y install golang gopls
}

HELP[python]='runs apt-get -y insall python-is-python3, sets default python to python3'
x.python () {
	sudo apt-get -y install python-is-python3
	
	python --version
}

HELP[clang]='runs apt-get install clang-12 and all packages'
x.clangheavy () {
	sudo apt-get install clang-12 --install-suggests
	
	clang-12 --version
	clang++-12 --version
}

HELP[clanglight]='runs apt-get install clang-12'
x.clanglight () {
	sudo apt-get install clang-12
	
	clang-12 --version
	clang++-12 --version
}

HELP[glwf]='installs libglfw3 and -dev and libglm-dev... and some more.'
x.glfw () {
	sudo apt-get update
	sudo apt-get install cmake pkg-config
	sudo apt-get install mesa-utils libglu1-mesa-dev freeglut3-dev mesa-common-dev
	sudo apt-get install libglew-dev libglfw3-dev libglm-dev
	sudo apt-get install libao-dev libmpg123-dev
	sudo apt-get install xorg-dev
	cd /usr/local/lib/
	sudo git clone https://github.com/glfw/glfw.git
	cd glfw
	sudo cmake .
	sudo make
	sudo make install
	echo -e "Now set up GLAD! Follow this link:\n https://medium.com/geekculture/a-beginners-guide-to-setup-opengl-in-linux-debian-2bfe02ccd1e"
}

HELP[shellcheck]='Installs shellcheck v.0.8.0'
x.shellcheck () {
	wget -O - https://github.com/koalaman/shellcheck/releases/download/v0.8.0/shellcheck-v0.8.0.linux.x86_64.tar.xz \
	    | sudo tar xJ -C /usr/bin/ --strip-components=1 shellcheck-v0.8.0/shellcheck && sudo chmod +x /usr/bin/shellcheck
	    
	shellcheck --version
}

x.gh () {
	curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | \
      sudo dd of=/etc/apt/trusted.gpg.d/githubcli-archive-keyring.gpg

	echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/trusted.gpg.d/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | \
      sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null

	sudo apt update
	sudo apt install gh
}


HELP[bash]='downloads .bashrc from github/gardm1/dot'
x.bash () {
	curl -fsSL https://raw.githubusercontent.com/gardm1/dot/main/.bashrc -o "$HOME/.bashrc"
}

HELP[nvim]='downloads neovim'
x.nvim () {	
	# Install dependencies
	sudo apt-get update
	sudo apt-get install -y ninja-build gettext libtool libtool-bin autoconf automake cmake g++ pkg-config unzip

	# Clone the latest stable release of Neovim from GitHub
	git clone https://github.com/neovim/neovim.git ~/neovim
	cd ~/neovim
	git checkout v0.8.3

	# Build and install Neovim
	make CMAKE_BUILD_TYPE=Release
	sudo make install

	# Create the Neovim configuration directory and file
	mkdir -p ~/.config/nvim
	
	
	# Add an alias for nvim
	echo "alias vim=nvim" >> ~/.bashrc
	
	source ~/.bashrc
	
	echo "Neovim has been installed and set up."
	rm -rf ~/neovim
	
	nvim --version
	
	: "${EDITOR:=nvim}"
}

HELP[nvimconfig]='Sets up a PDE enviorment with plugins, colorshceme and more'
x.nvimconfig () {
	mkdir -p "$HOME/.config"
	cd ~/temp
	git clone https://github.com/gardm1/dot.git
	cd ~/temp/dot/.config/ && mv nvim ~/.config/nvim/
	cd ~/temp && rm -rf dot
}

HELP[vimconfig]='Downloads vimrc from gardm1/dot/vim and gives you the option to set up plugins'
x.vimconfig () {
	curl -fsSL https://raw.githubusercontent.com/gardm1/dot/main/vim/.vimrc -o "$HOME/.vimrc"

	read -p "Do you want to install plugins etc? (y/n): " yn
	
	if [ $yn == "y" ]; then
 		sudo apt-get install cmake
		sudo apt-get install build-essential cmake vim-nox python3-dev
		sudo apt-get install mono-complete golang nodejs openjdk-17-jdk openjdk-17-jre npm
		
  		curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
		    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
		
		vim +'PlugInstall --sync' +qall
		
		cd ~/.vim/plugged/YouCompleteMe
		python3 install.py --all
	fi
}

# HELP[vim]='downloads vim dependencies from github/gardm1/dot/vim'
# x.vim () {
#	curl -fsSL https://raw.githubusercontent.com/gardm1/dot/main/vim/.vimrc -o "$HOME/.vimrc"
# }

# HELP[vimplugins]='Installs plug, from junegunn, sets up plugins in .vimrc'
# x.vimplugins () {
#	sudo apt install cmake
#
#	sudo apt install build-essential cmake vim-nox python3-dev
#
#	sudo apt install mono-complete golang nodejs openjdk-17-jdk openjdk-17-jre npm
#
#	curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
#	    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
#
#	vim +'PlugInstall --sync' +qall
#	
#	cd ~/.vim/plugged/YouCompleteMe
#
#	python3 install.py --all
# }

HELP[tmux]='Downloads tmux dependencies from github/gardm1/dot/tmux'
x.tmux () {
	curl -fsSL https://raw.githubusercontent.com/gardm1/dot/main/tmux/.tmux.conf -o "$HOME/.tmux.conf"
}


############################## BOILERPLATE ###########################
## Everything from here to the end of file can be snipped and updated
## with latest from https://github.com/rwxrob/template-bash-command.

# ------------------------------- usage ------------------------------

HELP[usage]='

```
'"$EXE"' usage
```

Display all possible commands. Note that this is usually easier by
simply using tab completion instead.'

x.usage() {
  local -a cmds
  for c in "${COMMANDS[@]}"; do
    [[ ${c:0:1} =~ _ ]] && continue
    cmds+=("$c")
  done
  local IFS='|'
  printf "usage: %s (%s)\n" "$EXE" "${cmds[*]}"
}

# ------------------------------- help -------------------------------

HELP[help]='

```
'"$EXE"' help [COMMAND]
```

Displays specific help information. If no argument is passed displays
general help information (main). Otherwise, the documentation for the
specific argument keyword is displayed, which usually corresponds to
a COMMAND name (but not necessarily). All documentation is written in
GitHub Flavored Markdown and will displayed as a web page if `pandoc`
and `$HELP_BROWSER` are detected, otherwise, just the Markdown is sent
to `$PAGER` (default: more).

Also see `readme` and `usage` commands.
'

x.help() { 
  local name="${1:-main}" title body file
  title=$(_help_title "$name") || true
  if [[ -z "$title" ]]; then
    title="$EXE $name"
    [[ $name == main ]] && title="$EXE"
  fi
  if [[ $name == main ]]; then
    body=$(x.readme)
    body=${body#*$title}
  else
    body="${HELP[$name]}"
  fi
  file="/tmp/help-$EXE-$name.html"
  if _have pandoc ; then
    if _have "$HELP_BROWSER" && [[ -t 1 ]] ;then
      pandoc -f gfm -s --metadata title="$title" \
        -o "$file" <<< "$body"
      [[ -z "$2" ]] && cd /tmp && exec "$HELP_BROWSER" "$file"
      return 0
    fi
    pandoc -f gfm -s --metadata title="$title" \
      -t plain <<< "$body" | "$PAGER"
    return 0
  fi
  echo -e "$title\n\n$body" | "$PAGER"
}

_help_title() {
  _filter "$@" && return $?;
  local name="$1"
  while IFS= read -r line; do
    [[ $line =~ ^[:space]*$ ]] && continue
    [[ $line =~ ^#\ (.+) ]] && echo "${BASH_REMATCH[1]}" && return 0
    return 1
  done <<< "${HELP[$name]}"
}

# ------------------------------ readme ------------------------------

HELP[readme]='
## Generate `README.md` File

```
'"$EXE"' readme > README.md
```

The `readme` command will output the embedded help documentation in raw
GitHub Flavored Markdown suitable for use as a `README.md` file on
GitHub or similar hosting service.'

x.readme() {
  _trim "${HELP[main]}"
  echo
  while IFS= read -r name; do
    [[ $name = main ]] && continue
    body=$(_trim "${HELP[$name]}")
    [[ $body =~ ^\# ]] || body="## The \`$name\` Command"$'\n\n'$body
    printf "%s\n\n" "$body"
  done < <(printf "%s\n" "${!HELP[@]}" | LC_COLLATE=C sort)
  echo -e "----\n\n*Autogenerated $(date)*\n"
}

# ----------------------------- utilities ----------------------------

_jsonstr() {
  _checkdep jq || return $?
  _buffer "$@" && return $?
  jq -MRsc <<< "$1"
}

_urlencode() {
  _buffer "$@" && return $?
  local string="$1"
  local strlen=${#string}
  local encoded=""
  local pos c o
  for ((pos = 0; pos < strlen; pos++)); do
    c=${string:$pos:1}
    case "$c" in
    [-_.~a-zA-Z0-9]) o="$c" ;;
    *) printf -v o '%%%02x' "'$c'" ;;
    esac
    encoded+="$o"
  done
  echo "$encoded"
}

_reduce() {
  local -n name="${1:?"name of array required"}"
  while IFS= read -r key; do
    [[ $key =~ $2 ]] && echo "$key"
  done < <(printf "%s\n" "${name[@]}")
}

_newest() {
  IFS=$'\n'
  mapfile -t f < <(ls -1 --color=never -trd "${1:-.}"/* 2>/dev/null)
  [[ ${#f} > 0 ]] && echo "${f[-1]}"
}

_trim() {
  local it="${1#"${1%%[![:space:]]*}"}"
  echo -e "${it%"${it##*[![:space:]]}"}"
}

_join() { local IFS="$1"; shift; echo "$*"; }

_have(){ type "$1" &>/dev/null; }

_checkdep() {
  _have "$1" && return 0
  echo "'$EXE' depends on '$1' for this, but not found"
  return 1
}

_filter(){
  [[ -n "$1" ]] && return 1
  while IFS= read -ra args; do
    "${FUNCNAME[1]}" "${args[@]}"
  done
}

_buffer() {
  [[ -n "$1" ]] && return 1
  "${FUNCNAME[1]}" "$(</dev/stdin)"
}

_prompt() {
  local key="$1" def="$2" regx="$3" value first=yes
  shift 3
  local text="${*:-Enter value for %s [%s]: }"
  [[ -z "$key" ]] && echo "Missing prompt key" >&2 && return 1
  [[ -z "$regx" ]] && echo "Missing valid regx" >&2 && return 1
  while [[ ! $value =~ $regx ]];do
    printf "$text" "$key" "$def" >&2
    IFS= read -r value
    [[ -z "$value" ]] && value="$def"
    [[ $value =~ ^\ +$ ]] && value=""
    [[ -n "$first" ]] && unset first && continue
    echo "Must match /$regx/" >&2
  done
  _trim "$value"
}

# --------------------- completion and delegation --------------------
#      `complete -C foo foo` > `source <(foo bloated_completion)`

_have _initialize && _initialize "$@"

while IFS= read -r line; do
  [[ $line =~ ^declare\ -f\ x\. ]] || continue
  COMMANDS+=( "${line##declare -f x.}" )
done < <(declare -F)
mapfile -t COMMANDS < \
  <(LC_COLLATE=C sort < <(printf "%s\n" "${COMMANDS[@]}"))

if [[ -n $COMP_LINE ]]; then
  line=${COMP_LINE#* }
  for c in "${COMMANDS[@]}"; do
    [[ ${c:0:${#line}} == "${line,,}" ]] && echo "$c"
  done
  exit
fi

for c in "${COMMANDS[@]}"; do
  if [[ $c == "$EXE" ]]; then
    "x.$EXE" "$@"
    exit $?
  fi
done

if [[ -n "$1" ]]; then
  declare CMD="$1"; shift
  for c in "${COMMANDS[@]}"; do
    declare cmd=$(command -v "x.$c")
    if [[ $c == "$CMD" && -n "$cmd" ]]; then
      "x.$CMD" "$@"
      exit $?
    fi
  done
fi

if _have _alternatives; then
  _alternatives "$@" 
  exit $?
fi

x.usage "$@"
